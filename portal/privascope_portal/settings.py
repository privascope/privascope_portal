"""
Django settings for privascope_portal project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY_PORTAL')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'off').lower() in ('on', '1', 'yes')

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'jobs',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_forms_bootstrap',
    'fsm_admin',
    'django_fsm_log',
]
try:
    __import__('django_extensions')
except ImportError:
    pass
else:
    INSTALLED_APPS += ('django_extensions',)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'privascope_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'privascope_portal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(default='sqlite:///db.sqlite3/')
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Detroit'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

# Runner

RUNNER_URL_BASE = 'http://runner:8005'
RUNNER_ENQUEUE = '/enqueue'
RUNNER_KEY = os.getenv('RUNNER_KEY')


# Email

EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', True)
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = os.getenv('EMAIL_PORT', 587)


# Site Configuration (needed for the URL in emails)

ABSOLUTE_URL_BASE = os.getenv('ABSOLUTE_URL_BASE')


#SAML Configuration

SAML2_URL_PATH = '/accounts/'
SAML2_URL_BASE = 'http://localhost:8000/accounts/'

INSTALLED_APPS += ('djangosaml2',)
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'djangosaml2.backends.Saml2Backend',
)
LOGIN_URL = '%slogin/' % SAML2_URL_PATH
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

from os import path, getenv
import saml2
import tempfile
BASEDIR = path.dirname(path.abspath(__file__))

# Generate temp files for cert, key, and metadata
saml2_sp_cert = tempfile.NamedTemporaryFile('w+', buffering=1)
saml2_sp_cert.write(getenv('SAML2_SP_CERT') + '\n')

saml2_sp_key = tempfile.NamedTemporaryFile('w+', buffering=1)
saml2_sp_key.write(getenv('SAML2_SP_KEY') + '\n')

saml2_idp_metadata = tempfile.NamedTemporaryFile('w+', buffering=1)
saml2_idp_metadata.write(getenv('SAML2_IDP_METADATA') + '\n')

SAML_CONFIG = {
    'xmlsec_binary': '/usr/bin/xmlsec1',
    # 'entityid': '%smetadata/' % SAML2_URL_BASE,
    'entityid': 'http://feathers.dsc.umich.edu/saml/metadata/',

    # directory with attribute mapping
    # 'attribute_map_dir': path.join(BASEDIR, 'attribute-maps'),
    'name': getenv('SAML2_SP_NAME'),

    # this block states what services we provide
    'service': {

        # we are just a lonely SP
        'sp': {
            'name': getenv('SAML2_SP_NAME'),
            'name_id_format': ('urn:oasis:names:tc:SAML:2.0:'
                                'nameid-format:transient'),
            'authn_requests_signed': 'true',
            'allow_unsolicited': True,
            'endpoints': {
                # url and binding to the assetion consumer service view
                # do not change the binding or service name
                'assertion_consumer_service': [
                    (getenv('SAML2_ACS_POST'),
                    saml2.BINDING_HTTP_POST),
                ],
                # url and binding to the single logout service view+

                # do not change the binding or service name
                'single_logout_service': [
                    (getenv('SAML2_LS_REDIRECT'),
                    saml2.BINDING_HTTP_REDIRECT),
                    (getenv('SAML2_LS_POST'),
                    saml2.BINDING_HTTP_POST),
                ],
            },

            # attributes that this project needs to identify a user
            'required_attributes': getenv('SAML2_REQUIRED_ATTRIBUTES').split(','),

            # attributes that may be useful to have but not required
            'optional_attributes': getenv('SAML2_OPTIONAL_ATTRIBUTES').split(','),
        },
    },

    # where the remote metadata is stored
    'metadata': {
        'local': [saml2_idp_metadata.name],
    },

    # Encryption
    # 'encryption_keypairs': [{
    #     'key_file': saml2_sp_key.name,  # private part
    #     'cert_file': saml2_sp_cert.name,  # public part
    # }],

    # set to 1 to output debugging information
    'debug': 1 if DEBUG else 0,

    # certificate
    'key_file': saml2_sp_key.name,
    'cert_file': saml2_sp_cert.name,
}

SAML_CREATE_UNKNOWN_USER = True

SAML_ATTRIBUTE_MAPPING = {
    'uid': ('username', ),
    'mail': ('email', ),
    'givenName': ('first_name', ),
    'sn': ('last_name', ),
}
